"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const ejs_1 = __importDefault(require("ejs"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const cheerio_1 = __importDefault(require("cheerio"));
const Theme_1 = __importDefault(require("./Theme"));
class Server {
    constructor(obj) {
        this._theme = new Theme_1.default();
        this._app = express_1.default();
        this._app.use(cookie_parser_1.default());
        this._hostIndexWrapper();
        this._hostAbout();
        this._hostUserStartPage();
        this._hostSettings();
        this._hostApi();
        this._app.listen(obj.port, () => {
            console.log(`Example app listening at http://localhost:${obj.port}`);
        });
    }
    /**
     * Wrap the users index page using an iframe so things can be added outside of the page.
     */
    _hostIndexWrapper() {
        this._app.get('/', (req, res) => {
            res.sendFile(__dirname + '/csp/wrapper.html');
        });
    }
    _hostAbout() {
        this._app.get('/about', (req, res) => {
            res.send(this._theme.getAbout());
        });
    }
    /**
     * Host the users custom start page.
     */
    _hostUserStartPage() {
        this._app.use(express_1.default.static('.', {
            index: false,
        }));
        this._app.get('/index', (req, res) => {
            const dataCookie = req.cookies['customstart-data'];
            let data;
            if (dataCookie != null) {
                data = JSON.parse(dataCookie);
            }
            else {
                data = this._theme.getDefaultData();
            }
            let html = this._getUserStartPageHtml(data);
            html = this._insertStartPageMeta(html);
            res.send(html);
        });
    }
    _insertStartPageMeta(html) {
        const meta = this._theme.getMeta();
        const $ = cheerio_1.default.load(html);
        // Remove existing meta.
        $('head title').replaceWith('<!-- Removed custom title -->');
        $('head meta[name="description"]').replaceWith('<!-- Removed custom meta description. -->');
        // Add my meta.
        $('head').append('<!-- Meta injected by Custom Start Page');
        $('head').append('<base target="_top">\r\n'); // Ensure the page always targets the top (if loaded in an iframe).
        $('head').append(`<title>${meta.name} | Custom Start Page</title>\r\n`);
        // $('head').append(`<meta name="description" content="${meta.name} is a free, open source and customisable start page for your browser, hosted by Custom Start Page.">\r\n`)
        return $.html();
    }
    _getUserStartPageHtml(data) {
        if (this._theme.isIndexTemplate()) {
            const template = this._theme.getIndexTemplate();
            return ejs_1.default.render(template, { data: data });
        }
        else {
            this._app.get('/', (req, res) => {
                return this._theme.getIndexHtml();
            });
        }
    }
    /**
     * Host the settings page.
     */
    _hostSettings() {
        // Files for the settings page to work.
        this._app.use('/csp', express_1.default.static(__dirname + '/csp'));
        // Actual settings page that lets the user customisable the page with.
        this._app.get('/settings', (req, res) => {
            res.sendFile(__dirname + '/csp/settings.html');
        });
    }
    _hostApi() {
        this._app.get('/api/data', (req, res) => {
            res.json(this._theme.getDefaultData());
        });
        this._app.get('/api/schema', (req, res) => {
            if (this._theme.schemaExists())
                res.json(this._theme.getSchema());
            else {
                res.status(404);
                res.send();
            }
        });
    }
}
exports.default = Server;
//# sourceMappingURL=Server.js.map