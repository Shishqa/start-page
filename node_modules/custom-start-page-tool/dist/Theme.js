"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const MarkdownRenderer_1 = __importDefault(require("./MarkdownRenderer"));
class Theme {
    constructor() {
        this._path = '.';
        this._markdownRenderer = new MarkdownRenderer_1.default();
        this._aboutPaths = [
            this._path + '/manifest/about.md',
            this._path + '/manifest/readme.md',
        ];
        this._metaPath = this._path + '/manifest/meta.json';
        this._schemaPath = this._path + '/manifest/schema.json';
    }
    aboutExists() {
        return this._anyPathExists(...this._aboutPaths);
    }
    getAbout() {
        let md = this._readFromFiles(...this._aboutPaths);
        if (md == null)
            return 'No about. ðŸ˜¢';
        return this._markdownRenderer.render(md);
    }
    metaExists() {
        return this._anyPathExists(this._metaPath);
    }
    getMeta() {
        return this._readJsonFromFile(this._metaPath);
    }
    schemaExists() {
        return this._anyPathExists(this._schemaPath);
    }
    getSchema() {
        return this._readJsonFromFile(this._schemaPath);
    }
    getDefaultData() {
        let data = this._readJsonFromFile(this._path + '/manifest/defaultData.json');
        if (data != null)
            return data;
        data = this._readJsonFromFile(this._path + '/manifest/default-data.json');
        return data;
    }
    isIndexTemplate() {
        return fs_1.default.existsSync(this._path + '/index.ejs');
    }
    getIndexHtml() {
        const html = fs_1.default.readFileSync('index.html', { encoding: 'utf8', flag: 'r' });
        return html;
    }
    getIndexTemplate() {
        const template = fs_1.default.readFileSync('index.ejs', { encoding: 'utf8', flag: 'r' });
        return template;
    }
    _anyPathExists(...paths) {
        for (const path of paths) {
            let exists = fs_1.default.existsSync(path);
            if (exists)
                return true;
        }
        return false;
    }
    _readFromFiles(...paths) {
        for (const path of paths) {
            try {
                return fs_1.default.readFileSync(path, { encoding: 'utf8', flag: 'r' });
            }
            catch (_a) {
            }
        }
        return null;
    }
    _readJsonFromFile(path) {
        const str = this._readFromFiles(path);
        if (str == null)
            return null;
        const json = JSON.parse(str);
        return json;
    }
}
exports.default = Theme;
//# sourceMappingURL=Theme.js.map